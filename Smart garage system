/*
this code for smart garage system that opens only with the owner car with rfid fitted inside it with ultrasonic sensor inside the garage to 
auto close the door after the car enters inside 

*/


/*
* ----------------------------------------------------------------------------
* This is a MFRC522 library example; see https://github.com/miguelbalboa/rfid
* for further details and other examples.
* 

* Typical pin layout used:
* -----------------------------------------------------------------------------------------
*             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
*             Reader/PCD   Uno           Mega      Nano v3    Leonardo/Micro   Pro Micro
* Signal      Pin          Pin           Pin       Pin        Pin              Pin
* -----------------------------------------------------------------------------------------
* RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
* SPI SS      SDA(SS)      10            53        D10        10               10
* SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
* SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
* SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
*/
#include <SoftwareSerial.h>                 //serial library for communication using any two pins in arduino
#include <SPI.h>
#include <MFRC522.h>
#include "Ultrasonic.h"
#include <Servo.h> 
SoftwareSerial mySerial(2, 3);       //software serial library pins
Servo myservo;  // create servo object to control a servo     
int pos;
boolean x= false;
Ultrasonic ultrasonic(7,8);
#define RST_PIN		9		// 
#define SS_PIN		10		//
MFRC522 mfrc522(SS_PIN, RST_PIN);	// Create MFRC522 instance
int flag,count=0;
void setup() {
     Serial.begin(9600);
  finger.begin(57600);
myservo.attach(6);  // attaches the servo on pin 9 to the servo object
Serial.begin(9600);		// Initialize serial communications with the PC
while (Serial==0);	// Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
SPI.begin();			// Init SPI bus
mfrc522.PCD_Init();		// Init MFRC522
//ShowReaderDetails();	// Show details of PCD - MFRC522 Card Reader details
Serial.println(F("Scan PICC to see UID, type, and data blocks..."));
 myservo.write(145);
 delay(250);
}





/////////////////////////////

int getFingerprintIDez()
{
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;
  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;
  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  // found a match!

 // Serial.print("Found ID #"); Serial.print(finger.fingerID);
  //Serial.print(" with confidence of "); Serial.println(finger.confidence);
    door.write(90);
    delay(10000);
    door.write(0);
    //return finger.fingerID;
return 1;
getFingerprintIDez();
}
////////////////////////
void loop() {

//if ((ultrasonic.Ranging(CM)>5) &&(ultrasonic.Ranging(CM)<180))
//{
//Serial.println("near");
  // Look for new cards
if ((ultrasonic.Ranging(CM)<5))
{
Serial.println("near");
   servo_fn_close();
   delay(5000);
  }
if ( ! mfrc522.PICC_IsNewCardPresent()) 
{
    while (x==true)
     { 
      servo_fn();    
      
      
      x==false;   
     }
return;
}
// Select one of the cards
if ( ! mfrc522.PICC_ReadCardSerial()) {
      if (x==true)            
       servo_fn();
    
return;
}
// Dump debug info about the card; PICC_HaltA() is automatically called
mfrc522.PICC_DumpToSerial(&(mfrc522.uid));
Serial.print(F("Card UID:"));
dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
//Serial.println();
//}
//else 
//{

//Serial.println();
//}
delay(100);
}
void dump_byte_array(byte *buffer, byte bufferSize) {
byte bufer[4]= {0x70, 0x7D, 0x2A ,0x33};
x= true;
for (byte i = 0; i < bufferSize; i++) {
Serial.print(buffer[i] < 0x10 ? " 0" : " ");
Serial.print(buffer[i],HEX);
if (bufer[i]!=buffer[i])
  x= false;   
}    
}
void servo_fn()
{
   
 for(pos = 155; pos >= 30; pos -= 1) // goes from 0 degrees to 180 degrees 
  {                                  // in steps of 1 degree 
    myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    delay(50);// waits 15ms for the servo to reach the position 
  }
   
 x=false;
}
void servo_fn_close()
{
   
 for(pos = 30; pos <= 146; pos += 1) // goes from 0 degrees to 180 degrees 
  {                                  // in steps of 1 degree 
    myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    delay(25);// waits 15ms for the servo to reach the position 
    x=false;
  
  }
}
   
  
 
